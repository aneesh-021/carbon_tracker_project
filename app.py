import streamlit as st
import matplotlib.pyplot as plt
import datetime

import requests

try:
    ip_info = requests.get("https://ipapi.co/json").json()
    user_city = ip_info.get('city', 'Other')
except:
    user_city = "Other"


st.set_page_config(layout="wide", page_title="CarbonCount Tracker")

# ----- Styling and Theme Toggle -----
def get_css(dark_mode):
    if dark_mode:
        bg_color = "#121212"
        text_color = "#ffffff"
        container_color = "#1e1e1e"
    else:
        bg_color = "#e8f5e9"
        text_color = "#000000"
        container_color = "#ffffff"
    return bg_color, text_color, container_color

# Toggle for Dark Mode
dark_mode = st.sidebar.checkbox("üåô Dark Mode", value=False)
bg_color, text_color, container_color = get_css(dark_mode)
heading_green = "#90ee90" if dark_mode else "#006400"  # light green on dark bg, dark green on light bg

container_style = f"background-color: {container_color}; padding: 1.5rem; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"
heading_style = f"color: {text_color}; font-size: 2rem; font-weight: bold;"
st.markdown(
    f"""
    <style>
        .stApp {{ background-color: {bg_color}; color: {text_color}; }}
        label, .metric-title {{
            color: {text_color} !important;
            font-size: 1.1rem !important;
        }}
    </style>
    """,
    unsafe_allow_html=True,
)



# ----- Sidebar -----
st.sidebar.title("üå± CarbonCount Tracker")
st.sidebar.markdown("---")
st.sidebar.markdown("""
**üåç What is Carbon Footprint?**

A carbon footprint is the total amount of greenhouse gases generated by our actions. Reducing it is crucial to combat climate change.

**‚úÖ Importance:**
- Slows global warming
- Promotes sustainability
- Reduces energy bills
""")

# ----- Data -----
DEVICE_EMISSION_FACTORS = {
    "Laptop": 0.05,
    "Smartphone": 0.02,
    "Monitor": 0.04,
    "Television": 0.06,
    "Tablet": 0.03,
}

APPLIANCE_EMISSION_FACTORS = {
    "Fan": 0.07,
    "Refrigerator": 0.15,
    "Washing Machine": 0.2,
    "Microwave": 0.18,
    "Light Bulb": 0.04,
}

VEHICLE_EMISSION_FACTORS = {
    "Petrol Car": 0.21,
    "Diesel Car": 0.24,
    "Bike": 0.1,
    "Bus": 0.15,
    "Train": 0.05,
    "Bicycle": 0.0,
    "Electric Car": 0.06,
    "Electric Scooter": 0.04,
    "Electric Vehicle": 0.05
}

# ----- Gradient Title -----
st.markdown("""
    <h2 style='text-align: center; background: linear-gradient(to right, #43cea2, #185a9d); 
    -webkit-background-clip: text; color: transparent;'>
        üåø Welcome to CarbonCount: Track Your Carbon Emissions
    </h2>
    """, unsafe_allow_html=True)

# ----- UI Layout -----
details = {}
total_emission = 0

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown(f"<div style='{container_style}'>", unsafe_allow_html=True)
    selected_devices = st.multiselect("Select Computer/AI Devices:", list(DEVICE_EMISSION_FACTORS.keys()))
    for device in selected_devices:
        hours = st.number_input(f"Usage time for {device} (in hours):", min_value=0.0, step=0.5, key=device)
        emission = DEVICE_EMISSION_FACTORS[device] * hours
        details[device] = emission
    st.markdown("</div>", unsafe_allow_html=True)

with col2:
    st.markdown(f"<div style='{container_style}'>", unsafe_allow_html=True)
    selected_appliances = st.multiselect("Select Electric Appliances:", list(APPLIANCE_EMISSION_FACTORS.keys()))
    for appliance in selected_appliances:
        hours = st.number_input(f"Usage time for {appliance} (in hours):", min_value=0.0, step=0.5, key=appliance)
        emission = APPLIANCE_EMISSION_FACTORS[appliance] * hours
        details[appliance] = emission
    st.markdown("</div>", unsafe_allow_html=True)

with col3:
    st.markdown(f"<div style='{container_style}'>", unsafe_allow_html=True)
    selected_vehicles = st.multiselect("Select Vehicles:", list(VEHICLE_EMISSION_FACTORS.keys()))
    for vehicle in selected_vehicles:
        km = st.number_input(f"Distance travelled by {vehicle} (in km):", min_value=0.0, step=1.0, key=vehicle)
        emission = VEHICLE_EMISSION_FACTORS[vehicle] * km
        details[vehicle] = emission
    st.markdown("</div>", unsafe_allow_html=True)



    city_tips = {
    "Mumbai": "üöÜ Use Mumbai Local trains to reduce road traffic emissions.",
    "Delhi": "üöá Delhi Metro is efficient and much greener than private cars.",
    "Bengaluru": "üöå Try BMTC electric buses or Namma Metro for eco travel.",
    "Pune": "üö≤ Pune has dedicated bicycle lanes ‚Äî perfect for short commutes.",
    "Kolhapur": "üåø Prefer auto-rickshaw sharing or cycling for short trips.",
    "Sangli": "üö∂‚Äç‚ôÇÔ∏è Walk or use shared autos to minimize carbon footprint.",
    "Other": "üå± Use walking, cycling, or shared transport where possible."
}


# ----- Total Emission -----
total_emission = sum(details.values())

st.markdown("""
---
<div style='color: darkgreen; font-size: 1.5rem; font-weight: bold;'>üìä Emission Summary:</div>
""", unsafe_allow_html=True)


if total_emission > 0:
    st.markdown(f"""
        <div style='display: flex; justify-content: space-between; margin-bottom: 20px;'>
            <div style='background-color: {container_color}; padding: 1rem; border-radius: 10px; width: 30%; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                <p style='color: {text_color}; font-weight: bold;'>Total CO2 Emission</p>
                <h3 style='color: {text_color};'>{total_emission:.2f} kg</h3>
            </div>
            <div style='background-color: {container_color}; padding: 1rem; border-radius: 10px; width: 30%; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                <p style='color: {text_color}; font-weight: bold;'>Items Tracked</p>
                <h3 style='color: {text_color};'>{len(details)}</h3>
            </div>
            <div style='background-color: {container_color}; padding: 1rem; border-radius: 10px; width: 30%; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                <p style='color: {text_color}; font-weight: bold;'>Safe Daily Limit</p>
                <h3 style='color: {text_color};'>5.5 kg</h3>
            </div>
        </div>
    """, unsafe_allow_html=True)


    st.markdown("<div style='color: darkgreen; font-size: 1.3rem; font-weight: bold;'>üîç Emission Breakdown:</div>", unsafe_allow_html=True)

    for item, value in details.items():
        st.write(f"{item}: {value:.2f} kg CO‚ÇÇ")

    fig, ax = plt.subplots()
    labels = list(details.keys())
    values = list(details.values())
    if sum(values) > 0:
        wedges, texts, autotexts = ax.pie(
            values,
            labels=labels,
            autopct="%1.1f%%",
            startangle=90,
            textprops={}

        )
        ax.axis('equal')
        st.pyplot(fig)

        import pdfkit
import base64




    # ----- Emission-Based Tip Section -----
tip_box_style = f"""
        background-color: {container_color};
        color: {text_color};
        padding: 1rem;
        border-left: 6px solid {'#ff4b4b' if total_emission > 5.5 else '#28a745'};
        border-radius: 8px;
        margin-top: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    """

   # ----- Emission Tips (Styled Card) -----
if total_emission > 8:
    tip_title = "‚ö†Ô∏è High Emissions Detected"
    tip_points = [
        "Use public transport or carpool",
        "Limit AC or heavy appliance use",
        "Unplug unused electronics",
        "Switch to renewable sources if possible"
    ]
    border_color = "#ff4b4b"
elif total_emission > 5.5:
    tip_title = "‚ö†Ô∏è Above Safe Limit (5.5 kg/day)"
    tip_points = [
        "Reduce screen time",
        "Use energy-efficient appliances",
        "Limit vehicle use for short distances"
    ]
    border_color = "#ffa500"
elif total_emission > 2:
    tip_title = "‚úÖ Moderate Emissions"
    tip_points = [
        "Switch off lights when not needed",
        "Reduce appliance usage duration",
        "Prefer bicycle or walking"
    ]
    border_color = "#28a745"
else:
    tip_title = "üåø Great Job! Low Emissions"
    tip_points = [
        "Keep using eco-friendly transport",
        "Maintain low appliance usage",
        "Spread awareness among friends!"
    ]
    border_color = "#2ecc71"

tip_html = f"""
<div style='background-color: {container_color}; padding: 1.2rem; border-radius: 10px; 
     margin-top: 30px; border-left: 6px solid {border_color}; box-shadow: 0 4px 8px rgba(0,0,0,0.1);'>

  <h4 style='color: {text_color}; margin-bottom: 10px;'>{tip_title}</h4>
  <ul style='color: {text_color}; font-size: 0.95rem; margin-left: 20px;'>
    {''.join(f"<li>{tip}</li>" for tip in tip_points)}
  </ul>
</div>
"""

st.markdown(tip_html, unsafe_allow_html=True)

city_tip = city_tips.get(user_city, city_tips["Other"])

city_tip_html = f"""
<div style='background-color: {container_color}; padding: 1rem; margin-top: 10px; border-radius: 8px; 
            border-left: 5px solid #3498db; color: {text_color}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>
    <strong>üìç Tip for {user_city}:</strong><br>
    {city_tip}
</div>
"""

st.markdown(city_tip_html, unsafe_allow_html=True)






st.markdown("""
---
<medium>Made with ‚ù§Ô∏è for a Greener Tomorrow</medium>
""", unsafe_allow_html=True)


